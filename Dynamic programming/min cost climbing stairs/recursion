Given an array of integers cost[] of length N, where cost[i] is the cost of the ith step on a staircase. Once the cost is paid, you can either climb one or two steps.
You can either start from the step with index 0, or the step with index 1.
Return the minimum cost to reach the top of the floor.

Example 1:

Input:
N = 3
cost[] = {10, 15, 20}
Output:
15
Explanation:

Cheapest option is to start at cost[1],
pay that cost, and go to the top.
 


Example 2:

Input:
N = 10
arr[] = {1, 100, 1, 1, 1, 100, 1, 1, 100, 1}
Output:
6
Explanation:
Cheapest option is to start on cost[0], 
and only step on 1s, skipping cost[3].


class Solution {
  public:
    int solve(vector<int> &cost,int index){
        //agar 1 step bcha hai to 1 hi option hai
        //agar 2 step bche hai to sidha niche aa jao
      if (index==0 || index==1){
          return cost[index];
      }
      int ans=cost[index]+min(solve(cost,index-1),solve(cost,index-2));
      return ans;
    }
    int minCostClimbingStairs(vector<int>&cost ,int N) {
        //we are doing direct jump because 1 step niche aane or 2 stpe niche aane ka koi paisa nahi hai
        return min(solve(cost,N-1),solve(cost,N-2));
    }
};
