A directed graph of V vertices and E edges is given in the form of an adjacency list adj. Each node of the graph is labelled with a distinct integer in the range 0 to V - 1.

A node is a terminal node if there are no outgoing edges. A node is a safe node if every possible path starting from that node leads to a terminal node.

You have to return an array containing all the safe nodes of the graph. The answer should be sorted in ascending order.

Example 1:

Input:


Output:
2 4 5 6
Explanation:
The given graph is shown above.
Nodes 5 and 6 are terminal nodes as there are no 
outgoing edges from either of them. 
Every path starting at nodes 2, 4, 5, and 6 all 
lead to either node 5 or 6.
Example 2:

Input:


Output:
3
Explanation:
Only node 3 is a terminal node, and every path 
starting at node 3 leads to node 3.



class Solution {
    private:
    bool dfs(vector<int> adj[],vector<int> &visited,vector<int> &parent,int check[],int src){
        visited[src]=1;
        parent[src]=1;
        check[src]=0;
        for (auto x:adj[src]){
            
            if (!visited[x]){
                if (dfs(adj,visited,parent,check,x)==true){
                    check[src]=0;
                    return true;
                }
            }
            else if (parent[x]==1){
                    check[src]=0;
                    return true;
                    
            }
        }
        check[src]=1;
        parent[src]=0;
        return false;
    }
  public:
    vector<int> eventualSafeNodes(int V, vector<int> adj[]) {
        vector<int> visited(V,0);
        vector<int> parent(V,0);
        int check[V];
        vector<int> ans;
        for (int i=0;i<V;i++){
            if (!visited[i]){
                dfs(adj,visited,parent,check,i);
            }
        }
        for (int i=0;i<V;i++){
            if (check[i]==1){
                ans.push_back(i);
            }
        }
        return ans;
    }
};
