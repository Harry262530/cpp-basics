// User function Template for C++

class Solution {
  public:
    vector<int> eventualSafeNodes(int V, vector<int> adj[]) {
        //if adj[] is given 
        vector<int> revadj[V];
        for (int i=0;i<V;i++){
            for (auto x:adj[i]){
                revadj[x].push_back(i);
            }
        }
        /*if vector<vector<int>> graph is given
        int n=graph.size();
        vector<vector<int>> adj(n);
        for (int i=0;i<n;i++){
            for (auto x:graph[i]){
                adj[x].push_back(i);
            }
        }
        */
        vector<int> indegree(V,0);
        for (int i=0;i<V;i++){
            for (auto x:revadj[i]){
                indegree[x]++;
            }
        }
        vector<int> topo;
        queue<int> q;
        for (int i=0;i<V;i++){
            if (indegree[i]==0){
                q.push(i);
            }
        }
        while (!q.empty()){
            auto temp=q.front();
            q.pop();
            topo.push_back(temp);
            for (auto x:revadj[temp]){
                indegree[x]--;
                if (indegree[x]==0){
                    q.push(x);
                }
            }
        }
        sort(topo.begin(),topo.end());
        return topo;
    }
};
