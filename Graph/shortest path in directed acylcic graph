void topo( vector<pair<int,int> adj[],stack<int> &s,vector<int> visited,int src){
    visited[i]=1;
    for (auto x:adj[src]){
        int v=x.first;
        if (!visited[v]){
            topo(adj,s,visited,v);
        }
    }
    s.push(src);
}
vector<int> shortest_path(int n,int m,vector<int> &edges[]){
    vector<pair<int,int> adj[];
    for (int i=0;i<n;i++){
        int u=edges[i][0];
        int v=edges[i][1];
        int wt=edges[i][2];
        adj[u].push_back({v,wt});
    }
    stack<int> s;
    vector<int> visited(n,0);
    
    for (int i=0;i<m;i++){
        if (!visited[i]){
            topo(adj,s,visited,i);
        }
    }
    vector<int> dis(n,1e9);
    dis[0]=0;
    while (!s.empty()){
        auto temp=s.top();
        s.pop();
        for (auto x:adj[temp]){
            int node=x.first;
            int weight=x.second;
            if (dist[temp]+weight<dist[node]){
                dist[node]=dist[temp]+weight;
            }
        }
    }
    return dist;
}
