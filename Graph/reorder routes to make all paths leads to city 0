There are n cities numbered from 0 to n - 1 and n - 1 roads such that there is only one way to travel between two different cities (this network form a tree). Last year, The ministry of transport decided to orient the roads in one direction because they are too narrow.

Roads are represented by connections where connections[i] = [ai, bi] represents a road from city ai to city bi.

This year, there will be a big event in the capital (city 0), and many people want to travel to this city.

Your task consists of reorienting some roads such that each city can visit the city 0. Return the minimum number of edges changed.

It's guaranteed that each city can reach city 0 after reorder.

 

Example 1:


Input: n = 6, connections = [[0,1],[1,3],[2,3],[4,0],[4,5]]
Output: 3
Explanation: Change the direction of edges show in red such that each node can reach the node 0 (capital).
Example 2:


Input: n = 5, connections = [[1,0],[1,2],[3,2],[3,4]]
Output: 2
Explanation: Change the direction of edges show in red such that each node can reach the node 0 (capital).
Example 3:

Input: n = 3, connections = [[1,0],[2,0]]
Output: 0


The base case that we know is - All outgoing edges from 0 must be reversed. So add the count into our final result.
At this stage, we can say all edges are coming into node 0. What is the next thing we need to do?
Make sure that all nodes that are connected to 0 have all edges coming into them.
E.g. if nodes x and y are connected to 0. After first step, there will be edges from x to 0 and y to 0. Now we want to make sure that all nodes that are directly connected to x, must have an edge coming into x. Similarly for y. If we keep on doing this recursively, we will get the answer at the end. Along the way, we will keep counting the edges that we reversed.


class Solution {
public:
    unordered_map<int,unordered_set<int>> in,out;
    int ans;
    void dfs(int src){
        for (auto x:in[src]){
            out[x].erase(src);
            dfs(x);
        }
        for (auto x:out[src]){
            ans++;
            in[x].erase(src);
            dfs(x);
        }
    }
    int minReorder(int n, vector<vector<int>>& connections) {
        ans=0;
        for (auto x:connections){
            in[x[1]].insert(x[0]);
            out[x[0]].insert(x[1]);
        }
        dfs(0);
        return ans;
    }
};
