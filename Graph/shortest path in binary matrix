Given an n x n binary matrix grid, return the length of the shortest clear path in the matrix. If there is no clear path, return -1.

A clear path in a binary matrix is a path from the top-left cell (i.e., (0, 0)) to the bottom-right cell (i.e., (n - 1, n - 1)) such that:

All the visited cells of the path are 0.
All the adjacent cells of the path are 8-directionally connected (i.e., they are different and they share an edge or a corner).
The length of a clear path is the number of visited cells of this path.

 

Example 1:


Input: grid = [[0,1],[1,0]]
Output: 2
Example 2:


Input: grid = [[0,0,0],[1,1,0],[1,1,0]]
Output: 4
Example 3:

Input: grid = [[1,0,0],[1,1,0],[1,1,0]]
Output: -1


class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        queue<pair<int,pair<int,int>>> q;
        vector<vector<int>> dist(n,vector<int>(m,1e9));
        dist[0][0]=0;
        q.push({0,{0,0}});
        int row[]={-1,-1,0,1,1,1,0,-1};
        int col[]={0,1,1,1,0,-1,-1,-1};
        while (!q.empty()){
            auto temp=q.front();
            q.pop();
            int dis=temp.first;
            int x=temp.second.first;
            int y=temp.second.second;
            for (int i=0;i<8;i++){
                int nrow=x+row[i];
                int ncol=y+col[i];
                if (nrow>=0 && nrow<n && ncol>=0 && ncol<m && grid[nrow][ncol]==0 && 
                dis+1<dist[nrow][ncol]){
                    dist[nrow][ncol]=dis+1;
                    if (nrow==n-1 && ncol==m-1){
                        return dis+1;
                    }
                    q.push({dis+1,{nrow,ncol}});
                }
            }
        }
        return -1;
    }
};
