You are given an Undirected Graph having unit weight, Find the shortest path from src to all the vertex and if it is unreachable to reach any vertex, then return -1 for that vertex.

Example:

Input:
n = 9, m= 10
edges=[[0,1],[0,3],[3,4],[4 ,5]
,[5, 6],[1,2],[2,6],[6,7],[7,8],[6,8]] 
src=0
Output:
0 1 2 1 2 3 3 4 4


class Solution {
  public:
    vector<int> shortestPath(vector<vector<int>>& edges, int N,int M, int src){
        vector<int> adj[N];
        for (auto x:edges){
            adj[x[0]].push_back(x[1]);
            adj[x[1]].push_back(x[0]);
        }
        vector<int> dist(N,1e9);
        queue<int> q;
        dist[src]=0;
        q.push(src);
        while (!q.empty()){
            auto temp=q.front();
            q.pop();
            for (auto x:adj[temp]){
                if (dist[temp]+1<dist[x]){
                    dist[x]=dist[temp]+1;
                    q.push(x);
                }
            }
        }
        vector<int> ans(N,-1);
        for (int i=0;i<N;i++){
            if (dist[i]!=1e9){
                ans[i]=dist[i];
            }
        }
        return ans;
    }
};
