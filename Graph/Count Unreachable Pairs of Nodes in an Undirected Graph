You are given an integer n. There is an undirected graph with n nodes, numbered from 0 to n - 1. You are given a 2D integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting nodes ai and bi.

Return the number of pairs of different nodes that are unreachable from each other.

 

Example 1:


Input: n = 3, edges = [[0,1],[0,2],[1,2]]
Output: 0
Explanation: There are no pairs of nodes that are unreachable from each other. Therefore, we return 0.
Example 2:


Input: n = 7, edges = [[0,2],[0,5],[2,4],[1,6],[5,4]]
Output: 14
Explanation: There are 14 pairs of nodes that are unreachable from each other:
[[0,1],[0,3],[0,6],[1,2],[1,3],[1,4],[1,5],[2,3],[2,6],[3,4],[3,5],[3,6],[4,6],[5,6]].
Therefore, we return 14.


class Solution {
    private:
    long long dfs(unordered_map<int,vector<int>> &map,vector<int> &visited,int src){
        visited[src]=1;
        long long count=1;
        for (auto x:map[src]){
            if (!visited[x]){
                count+=dfs(map,visited,x);
            }
        }
        return count;
    }
public:
    long long countPairs(int n, vector<vector<int>>& edges) {
        unordered_map<int,vector<int>> map;
        for (int i=0;i<edges.size();i++){
            map[edges[i][0]].push_back(edges[i][1]);
            map[edges[i][1]].push_back(edges[i][0]);
        }
        long long ans=0;
        long long count=0;
        vector<int> visited(n,0);
        for (int i=0;i<n;i++){
            if (!visited[i]){
                long long x=dfs(map,visited,i);
                ans+=count*x;
                count+=x;
            }
        }
        return ans;
    }
};
