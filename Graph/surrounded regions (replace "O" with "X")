Given an m x n matrix board containing 'X' and 'O', capture all regions that are 4-directionally surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.

 

Example 1:


Input: board = [["X","X","X","X"],["X","O","O","X"],["X","X","O","X"],["X","O","X","X"]]
Output: [["X","X","X","X"],["X","X","X","X"],["X","X","X","X"],["X","O","X","X"]]
Explanation: Notice that an 'O' should not be flipped if:
- It is on the border, or
- It is adjacent to an 'O' that should not be flipped.
The bottom 'O' is on the border, so it is not flipped.
The other three 'O' form a surrounded region, so they are flipped.
Example 2:

Input: board = [["X"]]
Output: [["X"]]


class Solution {
    private:
    void dfs(int row,int col,vector<vector<int>> &visited,vector<vector<char>> board,int rowrange[],int colrange[]){
        int n=board.size();
        int m=board[0].size();
        visited[row][col]=1;
        for (int i=0;i<4;i++){
            int nrow=row+rowrange[i];
            int ncol=col+colrange[i];
            if (nrow>=0 && nrow<n && ncol >=0 && ncol<m && !visited[nrow][ncol] && board[nrow][ncol]=='O'){
                dfs(nrow,ncol,visited,board,rowrange,colrange);
            }
        }
    }
public:
    void solve(vector<vector<char>>& board) {
        int n=board.size();
        int m=board[0].size();
        vector<vector<int>> visited(n,vector<int>(m,0));
        int rowrange[]={0,1,0,-1};
        int colrange[]={-1,0,1,0};
        for (int j=0;j<m;j++){
            if (!visited[0][j] && board[0][j]=='O'){
                dfs(0,j,visited,board,rowrange,colrange);
            }

            if (!visited[n-1][j] && board[n-1][j]=='O'){
                dfs(n-1,j,visited,board,rowrange,colrange);
            }
        }
        for (int i=0;i<n;i++){
            if (!visited[i][0] && board[i][0]=='O'){
                dfs(i,0,visited,board,rowrange,colrange);
            }
            if (!visited[i][m-1] && board[i][m-1]=='O'){
                dfs(i,m-1,visited,board,rowrange,colrange);
            }
        }
        for (int i=0;i<n;i++){
            for (int j=0;j<m;j++){
                if (visited[i][j]!=1 && board[i][j]=='O'){
                    board[i][j]='X';
                }
            }
        }
    }
};
