//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
    // Function to detect cycle in a directed graph.
    bool dfs(vector<int> adj[],vector<bool> &visited,vector<bool> &parent,int src){
        visited[src]=true;
        parent[src]=true;
        for (auto x:adj[src]){
            if (visited[x]!=true){
                if (dfs(adj,visited,parent,x)==true){
                    return true;
                }
            }
            else if (parent[x]==true){
                return true;
            }
        }
        parent[src]=false;
        return false;
    }
    bool isCyclic(int V, vector<int> adj[]) {
        vector<bool> visited(V,false);
        vector<bool> parent(V,false);
        for (int i=0;i<V;i++){
            if (visited[i]==false){
                if (dfs(adj,visited,parent,i)==true){
                    return true;
                }
            }
        }
        return false;
    }
};

//{ Driver Code Starts.

int main() {

    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;

        vector<int> adj[V];

        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
        }

        Solution obj;
        cout << obj.isCyclic(V, adj) << "\n";
    }

    return 0;
}

// } Driver Code Ends
