Given an adjacency list of a graph adj  of V no. of vertices having 0 based index. Check whether the graph is bipartite or not.
 

Example 1:

Input: 

Output: 1
Explanation: The given graph can be colored 
in two colors so, it is a bipartite graph.
Example 2:

Input:

Output: 0
Explanation: The given graph cannot be colored 
in two colors such that color of adjacent 
vertices differs. 
 

Your Task:
You don't need to read or print anything. Your task is to complete the function isBipartite() which takes V denoting no. of vertices and adj denoting adjacency list of the graph and returns a boolean value true if the graph is bipartite otherwise returns false.
 
 
 
//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
public:
    // bool bfs(vector<int>adj[],vector<int> &color,int src){
    //     queue<int> q;
    //     color[src]=0;
    //     q.push(src);
    //     while (!q.empty()){
    //         auto temp=q.front();
    //         q.pop();
    //         for (auto x:adj[temp]){
    //             if (color[x]==-1){
    //                 color[x]=!color[temp];
    //                 q.push(x);
    //             }
    //             else if (color[x]==color[temp]){
    //                 return false;
    //             }
    //         }
    //     }
    //     return true;
    // }
    bool dfs(vector<int> adj[],vector<int> &color,int src,int col){
        color[src]=col;
        for (auto x:adj[src]){
            if (color[x]==-1){
                if (dfs(adj,color,x,!col)==false){
                    return false;
                }
            }
            else if (color[x]==col){
                return false;
                
            }
        }
        return true;
    }
	bool isBipartite(int V, vector<int>adj[]){
	    vector<int> color(V+1,-1);
	    for (int i=0;i<V;i++){
	        if (color[i]==-1){
	            /*if (bfs(adj,color,i)==false){
	                return false;
	            }*/
	            if (dfs(adj,color,i,0)==false){
	                return false;
	            }
	        }
	    }
	    
	    return true;
	}
	

};

//{ Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int V, E;
		cin >> V >> E;
		vector<int>adj[V];
		for(int i = 0; i < E; i++){
			int u, v;
			cin >> u >> v;
			adj[u].push_back(v);
			adj[v].push_back(u);
		}
		Solution obj;
		bool ans = obj.isBipartite(V, adj);    
		if(ans)cout << "1\n";
		else cout << "0\n";  
	}
	return 0;
}
// } Driver Code Ends
